version: "3.0"
services:


####################
###  Node Setup  ###
####################
FROM node:10.13-alpine as node-angular-cli
#Linux setup
RUN apk update \
  && apk add --update alpine-sdk \
  && apk del alpine-sdk \
  && rm -rf /tmp/* /var/cache/apk/* *.tar.gz ~/.npm \
  && npm cache verify \
  && sed -i -e "s/bin\/ash/bin\/sh/" /etc/passwd

#Angular CLI
RUN npm install -g @angular/cli@8.0.3

####################
### Node Builder ###
####################
FROM node-angular-cli as node-builder

RUN mkdir -p /build

COPY /src/main/ng/fxui /build/src

WORKDIR /build/src

RUN npm rebuild node-sass &&\
    npm install &&\
    ng build --prod --output-path ../dist
    
  # Core Spring Boot Application
#  app:
#    build:
#      context: ..
#      dockerfile: ./Dockerfile
#    image: "rx_mongo_example"
#    env_file:
#      - .env
#    links:
#      - mongo
#    ports:
#      - 8080:8080

  # MongoDB - Reactive Persistence
  mongo:
    build:
      context: mongo
      dockerfile: Dockerfile
    image: "mongodb"
    hostname: mongo
    ports:
      - 27017:27017
    volumes:
      - mongodata:/data/db
    env_file:
      - mongo/.env

  # The mongo-seed container is just for waiting until the main mongo container is done setting its replicaset up
  # and then initializing data.
  mongo-seed:
    build:
      context: mongo_seed
      dockerfile: Dockerfile
    # ping the main mongo instance relentlessly until the connection is ready, then wait, then run an initialize data script to populate data.
    command: bash -c "until mongo mongo:27017/fantasy_db; do echo 'Waiting for Mongo to be ready...'; sleep 1; done; sleep 3; mongo mongo:27017/fantasy_db init.js; "
    links:
      - mongo

volumes:
  mongodata: